1) npm init
2) telegramBotFather => создаем бота, получаем token
3) index.js => const token = 'tokenfromtelegram'
4) npm install node-telegram-bot-api nodemon
5) index.js => const TelegramApi = require('node-telegram-bot-api')
6) package-json => "scripts": {
                       "dev": "nodemon index.js",
                       "start": "node index.js"
                     },
7) index.js => const bot = new TelegramApi(token, {polling: true});
8) index.js => // Включаем бота, и при переходе в боте /start, получаем данные о console.msg
                bot.on('message', (msg) => {
                                 console.log(msg);
                               })
9) index.js => bot.on('message', (msg) => {
                 const text = msg.text;
                 const chatId = msg.chat.id;
                 bot.sendMessage(chatId, `Ты написал мне ${text}`);
               });
// const text - это сообщение которое отправил нам user
// const chatId - это ID user
// bot.sendMessage - Отправляем user-у в ответ сообщение
10) index.js => bot.on('message', async (msg) => {
                  const text = msg.text;
                  const chatId = msg.chat.id;
                  if (text === '/start') {
                    await bot.sendSticker(chatId, 'https://tgram.ru/wiki/stickers/img/spidermen_vk/png/12.png');
                    await bot.sendMessage(chatId, 'Добро пожаловать в телеграм бот от az1k3');
                  }
                  if (text === '/info') {
                    await bot.sendMessage(chatId, `Тебя зовут ${msg.from.first_name} ${msg.from.last_name}`);
                  }
                });
// Async / await - обращения к боту асинхронные, добавляем async / await
// Далее условия if (), там же передаем на /start сначала стикер, потом сообщение
// На /info передаем info об user-е
11) index.js => bot.setMyCommands([
                  {command: '/start', description: 'Начальное приветствие'},
                  {command: '/info', description: 'Получить информацию о пользователе'},
                  {command: '/game', description: 'Игра угадай цифру'},
                ]);
// Добавляем список команд / , с которыми может взаимодействовать user
12) index.js => const start = () => {
                  bot.setMyCommands([
                    {command: '/start', description: 'Начальное приветствие'},
                    {command: '/info', description: 'Получить информацию о пользователе'},
                  ]);

                  bot.on('message', async (msg) => {
                    const text = msg.text;
                    const chatId = msg.chat.id;
                    if (text === '/start') {
                      await bot.sendSticker(chatId, 'https://tgram.ru/wiki/stickers/img/spidermen_vk/png/12.png');
                      return bot.sendMessage(chatId, 'Добро пожаловать в телеграм бот от az1k3');
                    }
                    if (text === '/info') {
                      return bot.sendMessage(chatId, `Тебя зовут ${msg.from.first_name} ${msg.from.last_name}`);
                    }
                    return bot.sendMessage(chatId, 'Я тебя не понимаю, попробуй еще раз')
                  });
                };
                start()
// Помещаем весь предыдущий код в function start(), для структуризации и порядка
// Заменяем в 2 местах, await => return. Для того что бы точно получать ответ
// И в конце return срабатывает если user прислал непонятное значение
13) index.js =>
const chats = {}
const start => if (text === '/game') {
                                  await bot.sendMessage(chatId, `Сейчас я загадаю цифру от 0 до 9, а ты должен ее отгадать!`);
                                  const randomNumber = Math.floor(Math.random() * 10)
                                  chats[chatId] = randomNumber
                                  return bot.sendMessage(chatId, 'Отгадывай');
                                }
// Добавляем if /game, отправляем Message. И подключаем randomNumber. Math.floor, округляет числа
// Создаем пустой объект chats {}, что бы туда поместить chatId user и его randomNumber
14) index.js => const gameOptions = {
                  reply_markup: JSON.stringify({
                    inline_keyboard: [
                       [{text: 'Текст кнопки 1', callback_data: '1'}],
                       [{text: 'Текст кнопки 2', callback_data: '2'}],
                       [{text: 'Текст кнопки 3', callback_data: '3'}],
                       [{text: 'Текст кнопки 4', callback_data: '4'}],
                    ]
                  })
                }
/game => return bot.sendMessage(chatId, 'Отгадывай', gameOptions);
// gameOptions - это кнопки которые мы передаем user
15) index.js => bot.on => bot.on('callback_query', (msg) => {
                              const data = msg.data;
                              const chatId = msg.message.chat.id;
                              bot.sendMessage(chatId, `Ты выбрал цифру ${data}`)
                            });
// Создаем в конце bot.on, еще один bot.on которая отрабатывает при нажатии на кнопки
// data => связана с callback_data в gameOptions, получаем данные от туда
// Отправляем message user-y о его выбранной кнопке
16) index.js => gameOptions =>  [{text: '1', callback_data: '1'},{text: '2', callback_data: '2'},{text: '3', callback_data: '3'}],
                                     [{text: '4', callback_data: '4'},{text: '5', callback_data: '5'},{text: '6', callback_data: '6'}],
                                     [{text: '7', callback_data: '7'},{text: '8', callback_data: '8'},{text: '9', callback_data: '9'}],
                                     [{text: '0', callback_data: '0'}],
// Создаем кнопки от 0 до 9, в виде старых тел.
17) index.js => const againOptions = {
                  reply_markup: JSON.stringify({
                    inline_keyboard: [
                      [{text: 'Играть еще раз', callback_data: '/again'}],
                    ]
                  })
                };
// Создаем кнопку играть еще раз
18) index.js => const startGame = async (chatId) => {
                  await bot.sendMessage(chatId, `Сейчас я загадаю цифру от 0 до 9, а ты должен ее отгадать!`);
                  const randomNumber = Math.floor(Math.random() * 10);
                  chats[chatId] = randomNumber;
                  await bot.sendMessage(chatId, 'Отгадывай', gameOptions);
                };
// Создаем функцию startGame, что бы не дублировать код, вызываем ее в нужных местах
19) index.js => bot.on =>
if (data === '/again') {
      return startGame(chatId);
    }
    if (data == chats[chatId]) {
      return await bot.sendMessage(chatId, `Поздравляю, ты отгадал цифру ${chats[chatId]}`, againOptions);
    } else {
      return await bot.sendMessage(chatId, `К сожалению ты не угадал, бот загадал цифру ${chats[chatId]}`, againOptions);
    }
  });
20) Создаем файл options.js => туда вырезыаем из index.js {gameOptions, againOptions}
21) Импортируем модуль options в index.js => const {gameOptions, againOptions} = require('./options.js')
22) Создаем repository в github , terminal => git init => git add .
